/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function generate(a: number): number;
export function solve(a: number, b: number, c: number): number;
export function __wbg_get_solverconfig_limit(a: number): number;
export function __wbg_set_solverconfig_limit(a: number, b: number): void;
export function solverconfig_new(): number;
export function __wbg_generatorconfig_free(a: number): void;
export function __wbg_get_generatorconfig_samples(a: number): number;
export function __wbg_set_generatorconfig_samples(a: number, b: number): void;
export function __wbg_get_generatorconfig_iterations(a: number): number;
export function __wbg_set_generatorconfig_iterations(a: number, b: number): void;
export function __wbg_get_generatorconfig_removals(a: number): number;
export function __wbg_set_generatorconfig_removals(a: number, b: number): void;
export function generatorconfig_new(): number;
export function __wbg_generatoroutput_free(a: number): void;
export function generatoroutput_puzzle(a: number, b: number): void;
export function generatoroutput_solution(a: number, b: number): void;
export function __wbg_solutionrecord_free(a: number): void;
export function solutionrecord_branches(a: number): number;
export function solutionrecord_solution(a: number, b: number): void;
export function __wbg_solveroutput_free(a: number): void;
export function solveroutput_result(a: number, b: number): void;
export function __wbg_solverconfig_free(a: number): void;
export function generatoroutput_difficulty(a: number): number;
export function solutionrecord_iteration(a: number): number;
export function solveroutput_steps(a: number): number;
export function solveroutput_iterations(a: number): number;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
